[
["css-layouts.html", "Chapter 7 CSS Layouts 7.1 Block vs. Inline 7.2 The Box Model 7.3 Changing the Flow 7.4 Flexbox Resources", " Chapter 7 CSS Layouts The previous chapters have discussed how to use CSS to specify the appearance of individual html elements (e.g., text size, color, backgrounds, etc). This chapter details how to use CSS to declare where HTML elements should appear on a web page! 7.1 Block vs. Inline Without any CSS, html elements follow a default flow on the page based on the order they appear in the HTML. Layout is based on whether the element is a block element or an inline element. Inline elements (e.g., &lt;em&gt;, &lt;a&gt;, &lt;span&gt;) are put next to each other on a single line (left to right, unless you specify a right-to-left language). Block elements (&lt;p&gt;, &lt;ul&gt;, &lt;div&gt;) are placed on subsequent “lines”, from top to bottom. &lt;div&gt;Block element&lt;/div&gt; &lt;div&gt;Block element&lt;/div&gt; Example of block elements, placed on top of each other. &lt;span&gt;Inline element&lt;/span&gt; &lt;span&gt;Other inline element&lt;/span&gt; Example of inline elements, next to each other (even if the code is on separate lines). However, you can force an element to be either block or inline by declaring the display CSS property: div.inlined { display: inline; } &lt;!-- this will produce the same result as using &lt;span&gt; elements --&gt; &lt;div class=&quot;inlined&quot;&gt;Inline element&lt;/div&gt; &lt;div class=&quot;inlined&quot;&gt;Other inline element&lt;/div&gt; The display property also allows you to remove elements from the page flow entirely: div.hidden { /* do not show element at all */ display: none; } There are several other more specific settings, the most useful of which is inline-block. This lets you treat an element as inline (no line break after), but also gives you the ability to specify its width, height, and other properties only adjustable on block elements. This is particularly useful for making things like lists (&lt;ul&gt;) appear “inline”. An example of an element with display:inline-block. 7.2 The Box Model The CSS Box Model is one of the core concepts in CSS, and is one of the central frameworks by which elements are visually laid out on the page. All HTML element (including text!) include an imaginary box around their content. Elements are laid out with their boxes next to each other (side by side for inline, stacked on top for block). These boxes are normally just large enough to contain the content inside the element, but you can use CSS to alter the size of and spacing between these boxes in order to influence the layout. First off, you can set the width and height of elements explicitly, though be careful when you do this. If your width and height are too small, the element’s content will be clipped by default (a behavior controlled by the overflow property). It’s generally best to set only the width or the height, but not both. You can also specify a min-width or min-height to ensure that the width or height is at least a particular size. Conversely, you can use max-width and max-height to constrain the size of the element. In order to adjust the spacing between boxes, you can manipulate one of 3 properties: A diagram of the box model properties Padding The padding is the space between the content and the border (e.g., the edge of the box). An element’s padding. It is possible to specify the padding of each side of the box individually, or a uniform padding for the entire element: /* specify each side individually */ div { padding-top: 1em; padding-bottom: 1em; padding-left: 2em; padding-right: 0; /* no units needed on 0 */ } /* specify one value for all sides at once */ div { padding: 1.5em; } /* specify one value for top/bottom (first) and one for left/right (second) */ div { padding: 1em 2em; } Border The border (edge of the box) can be made visible and styled in terms of its width, color, and “style”, listed in that order: .boxed { border: 2px dashed black; /* border on all sides */ } .underlined { border-bottom: 1px solid red; /* border one side */ } .something { /* control border properties separately */ border-top-width: 4px; border-top-color: blue; border-top-style: dotted; border-radius: 4px; /* rounded corners! */ } Margin Finally, the margin specifies the space between this box and other nearby boxes. margin is declared in an equivalent manner to padding. An element’s margins. Note that browsers typically collapse (overlap) the margins of adjacent elements. For example, if you have two paragraphs on top of one another, and you set margin-bottom on the first and margin-top on the second, most browsers will overlap those margins and just use the larger of the two values to determine the spacing. Box-Sizing An elements padding, border, and margin can be used to put space between element content on the page. However, when you assign an explicit width or height to an element, the dimension you specify does not include the padding or border when calculating the size of the element on the page! That is, if you have an element with the properties .my-box { width: 100px; padding: 10px; /* includes both left and right */ } Then the element will take up 120px on the screen: the width plus the left and right padding. However, when specifying more complex or responsive layouts, it’s often useful to have width represent the entire width of the box, and not need to account for the border and padding separately in calculations. You can do this using the box-sizing property—a value of border-box will indicate that specified size of the box (e.g., the width) should include the size of the padding and border when determining the content area. It’s common to want to apply this property to all of the elements on the page, which you can do with the * selector (like a wildcard from the command-line!): * { box-sizing: border-box; /* all elements include border and padding in size */ } This is a common enough change that you may wish to include it in all of your .css files! 7.3 Changing the Flow Specifying the display style and box properties will adjust the layout of HTML elements, but they are still following the browser’s default flow. The layout rules will still apply, but are stre influenced by the amount of content and the size of the browser (e.g., for when inline elements “wrap”). However, it is possible to position elements outside of the normal flow by specifying the position property. For example, giving an element a position:fixed property will specify a “fixed” position of the element relative to the browser window. It will no move no matter where it appears in the HTML or where the browser scrolls. See this Code Pen for an example. In order to specify the location for a fixed element, use the top, left, bottom, and/or right properties to specify distance from the appropriate edge of the browser window: /* make the &lt;nav&gt; element fixed at the top of the browser window */ nav { position: fixed; top: 0; /* 0px from the top */ left: 0; /* 0px from the left */ width: 100%; /* same as parent, useful for spanning the page */ } You can also specify an element’s position to be relative, meaning relative to its normal position. Note that this leaves the element within normal flow (e.g., for how its padding effects other elements around it). See this Code Pen to explore this option. Finally, you can specify an element’s position to be absolute, meaning relative to it (positioned) parent element. If the parent has not been explicitly positioned (has a declared position property), the element is positioned relative to the root element. Try it out in this Code Pen. This mostly remove an element from normal flow, though its parent may still be part of the flow and thus may influence the absolutely positioned element’s location. Floating You can also remove an element from it’s normal position in the flow by making it float. This is commonly done with pictures, but can be done with any element (such as &lt;div&gt;). A floated element is shoved over to one side of the screen, with the rest of the content wrapping around it: .float-right { float: right; margin: 1em; /* for spacing */ } Content will continue to sit along side a floated element until it “clears” it (gets past it to the next line). You can also force content to “clear” a float by using the clear property. An element with this property cannot have other elements floating to the indicated side: .clear-float { clear: both; /* do not allow floating elements on either side */ } The float property is good for when you simply want some content to sit off to the side. But you should not try to use this property for more complex layouts (e.g., multi-column structures); there are better solutions for that. 7.4 Flexbox The position and float properties allow you to have individual elements break out of the normal page flow. While it is possible to combine these to produce complex effects such as multi-column layouts, this approach is fraught with peril and bugs due to browser inconsistencies. In response, CSS3 has introduced new standards specifically designed for non-linear layouts called Flexbox. The Flexbox layout allows you to efficiently lay out elements inside a container (e.g., columns inside a page) so that the space is flexibly distributed. This provides additional advantages such as ensuring that columns have matching heights. Flexbox is a new standard that is now supported by most modern browsers; it has a buggy implementation in Microsoft IE, but is supported in the standards-compliant Edge. For older browsers, you can instead rely on a grid system from one of the popular CSS Frameworks such as Bootstrap. Despite it’s capabilities, Flexbox still is designed primarily for one-directional flows (e.g., having one row of columns). To handle true grid-like layouts, browsers are adopting another emerging standard called Grid. The Grid framework shares some conceptual similarities to Flexbox (configuring child elements inside of a parent container), but utilizes a different set of properties. Learning one should make it easy to pick up the other. Note that the grid framework is less well supported than even Flexbox (it is not supported by IE, Edge, or common older Android devices), so should be used with caution. Resources The Box Model (MDN) The CSS Box Model (CSS-Tricks) A Complete Guide to Flexbox The best explanation of Flexbox properties you’ll find. A Complete Guide to Grid "]
]
